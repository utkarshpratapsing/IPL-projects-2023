                    Lab Assignment 1
                    ----------------

Date: 10th January 2023

Submission Date: 4th February 2023, Saturday, 11:59:59pm
Evaluation Date: 11/12th February 2023, Saturday/Sunday
 
In this assignment,  you have to construct a scanner  and a parser for
our language that outputs the syntax tree in a graphical form. To draw
the tree,  use a tool  called graphviz.   There are two  components of
graphviz that  you will have to  use: The language for  describing the
tree called DOT and a tool called xdot that displays the tree.

https://www.graphviz.org/pdf/dotguide.pdf tells you how to display a
tree through dot.

Specifically you have to do the following:

0. Study the examples in the demo very carefully.

1. For the grammar specified as  part of the assignment, first write a
flex script to  detect tokens.  Test it by  generating a standalone
scanner  for the  tokens  and  feeding it  programs that conform to
the given grammar. In the lab hour tomorrow, I shall give you an idea on
how to generate standalone scanners.

2.  Now  take  the  grammer  itself  and  convert  it  to  a  bison
script. Link it with the scanner generated earlier (after suitable changes).
Test it using  the  %debug  directive.   

3.  Study the bison document  supplied along with the assignment to
find out how actions are added to a bison script.

3.   Read  about  the   DOT  language   from  the   document
dotguide.pdf

4. Add actions to the bison script so that the output of the parser
is a DOT script representing the parse tree for a given input program.

5. This  DOT script,  when processed by  the graphviz tool  called xdot
should display the parse tree for any program.

The parse  tree must exactly  conform to the grammar.   The leafs are to 
be labelled by lexemes.

5. The xecat deliverables will be specified later.




Grammar

    translation_unit: 
    struct_specifier
                    | function_definition
                     | translation_unit struct_specifier
                    | translation_unit function_definition

     struct_specifier: STRUCT IDENTIFIER '{' declaration_list '}' ';'

     function_definition: type_specifier fun_declarator compound_statement

     type_specifier: VOID
                   | INT
                   | FLOAT
                   | STRUCT IDENTIFIER

    fun_declarator: IDENTIFIER '(' parameter_list ')'
                  | IDENTIFIER '(' ')'

    parameter_list: parameter_declaration
                  | parameter_list ',' parameter_declaration

    parameter_declaration: type_specifier declarator

    declarator_arr: IDENTIFIER
                  | declarator_arr '[' INT_CONSTANT ']'

    declarator: declarator_arr
              | '*' declarator

    compound_statement: '{' '}'
                      | '{' statement_list '}'
                      | '{' declaration_list statement_list '}'

    statement_list: statement
                  | statement_list statement

    statement: ';'
             | '{' statement_list '}'
             | selection_statement
             | iteration_statement
             | assignment_statement
             | procedure_call
             | RETURN expression ';'

    assignment_expression: unary_expression '=' expression

    assignment_statement: assignment_expression ';'

    procedure_call: IDENTIFIER '(' ')' ';'
                  | IDENTIFIER '(' expression_list ')' ';'

    expression: logical_and_expression
              | expression OR_OP logical_and_expression

    logical_and_expression: equality_expression
                          | logical_and_expression AND_OP equality_expression
   
    equality_expression: relational_expression
                       | equality_expression EQ_OP relational_expression
                       | equality_expression NE_OP relational_expression

    relational_expression: additive_expression
                         | relational_expression '<' additive_expression
                         | relational_expression '>' additive_expression
                         | relational_expression LE_OP additive_expression
                         | relational_expression GE_OP additive_expression

    additive_expression: multiplicative_expression
                       | additive_expression '+' multiplicative_expression
                       | additive_expression '-' multiplicative_expression

    unary_expression: postfix_expression
                    | unary_operator unary_expression

    multiplicative_expression: unary_expression
                             | multiplicative_expression '*' unary_expression
                             | multiplicative_expression '/' unary_expression

    postfix_expression: primary_expression
                      | postfix_expression '[' expression ']'
                      | IDENTIFIER '(' ')'
                      | IDENTIFIER '(' expression_list ')'
                      | postfix_expression '.' IDENTIFIER
                      | postfix_expression PTR_OP IDENTIFIER
                      | postfix_expression INC_OP // Allows x++++

    primary_expression: IDENTIFIER
                      | INT_CONSTANT
                      | FLOAT_CONSTANT
                      | STRING_LITERAL
                      | '(' expression ')'

    expression_list: expression
                   | expression_list ',' expression

    unary_operator: '-'
                  | '!'
                  | '&'
                  | '*'

    selection_statement: IF '(' expression ')' statement ELSE statement

    iteration_statement: WHILE '(' expression ')' statement
                       | FOR '(' assignment_expression ';' expression ';' assignment_expression ')' statement

    declaration_list: declaration
                    | declaration_list declaration

    declaration: type_specifier declarator_list ';'

    declarator_list: declarator
                    | declarator_list ',' declarator


----------------------------------------------

Identifier are: A single letter or _  followed by 0 or more letters or
_ or digits.

A description of integer and float constants. Not part of the grammar.  

Numeric constants are defined as: 

C-constant:
  C-integer-constant
  floating-point-constant
 
C-integer-constant:
  [1-9][0-9]*
  0[bB][01]*
  0[0-7]*
  0[xX][0-9a-fA-F]*
 
floating-point-constant:
  integer-part.[fractional-part ][exponent-part ]

integer-part:
  [0-9]*
 
fractional-part:
  [0-9]*
 
exponent-part:
  [eE][+-][0-9]*
  [eE][0-9]*

The rule given above is not entirely accurate. Correct it on the basis of the following examples:

1.
23.1
01.456
12.e45
12.45e12
12.45e-12
12.45e+12

The following are not examples of FLOAT_CONSTANTs:

234
.

We have not defined STRING_LITERALs. For our purpose, these are
sequence of characters enclosed within a pair of ". If the enclosed
sequence contains \ and ", they must be preceded with a \. Apart from
\and ", the only other character that can follow a \ within a string
are t and n. 
